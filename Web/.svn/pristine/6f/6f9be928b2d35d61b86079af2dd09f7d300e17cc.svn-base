<cfcomponent>

	<cfset This.name = "UserManagement">
	<cfset This.Sessionmanagement = "Yes">
	<cfset This.Sessiontimeout = "#createTimeSpan(0, 0, 60, 0)#">
	<cfset This.applicationtimeout = "#createTimeSpan(5, 0, 0, 0)#">

	<cffunction name="onApplicationStart">
		<cfset var pageRenderer = createObject("/CF-INF/cfc/PageRenderer")>
		<cfset var pageLimits = pageRenderer.getQueryLimits() />
		<cfset application.DATASOURCE = "c148196-h218913">
		<cfset application.DOMAIN = "equibidz.com">
		<cfset application.SITE_ADDRESS = iif(cgi.HTTP_HOST contains "localhost", de("localhost"), de("www.equibidz.com"))>
        <cfset application.sessions = 0>
		<cfset application.environment = environment>
		<cfset application.limitCategoryFrontPage = pageLimits.limitCategoryFrontPage>

		<!--- You do not need to return True if you don't set the cffunction returntype attribute. --->
	</cffunction>

	<cffunction name="onApplicationEnd">
		<cfargument name="ApplicationScope" required=true/>
		<cflog file="#This.Name#" type="Information"
			text="Application #ApplicationScope.applicationname# Ended">
	</cffunction>

	<cffunction name="onRequestStart">
		<cfdump var="#application#">
		<!--- Authentication code, generated by the Dreamweaver Login Wizard,
			makes sure that a user is logged in, and if not displays a login page. --->
		<cfinvoke component="/CF-INF/cfc/EnvironmentConfigurer" method="getEnvironment" returnvariable="environment" />
		<cfset variables.env = environment>
		<cfinclude template="/redesign/includes/common_functions.cfm">
	</cffunction>


	<cffunction name="onRequest">
		<cfargument name = "targetPage" type="String" required=true/>
		<cfsavecontent variable="content">
        	<cfinclude template="#Arguments.targetPage#">
    	</cfsavecontent>
		<!--- This is a minimal example of an onRequest filter.
		<cfoutput>
			#replace(content, "report", "MyCompany Quarterly Report", "all")#
		</cfoutput> --->
	</cffunction>

	<!--- Display a different footer for logged in users than for guest users or
		users who have not logged in. --->

	<cffunction name="onRequestEnd">
		<cfargument type="String" name = "targetTemplate" required=true/>
		<cfset theAuthuser=getauthuser()>
		<cfif ((theAuthUser EQ "guest") OR (theAuthUser EQ ""))>
			<cfinclude template="noauthuserfooter.cfm">
		<cfelse>
			<cfinclude template="authuserfooter.cfm">
		</cfif>
	</cffunction>


	<cffunction name="onSessionStart">
		<cfscript>
        Session.started = now();
    </cfscript>
		<cflock timeout="5" throwontimeout="No" type="EXCLUSIVE" scope="SESSION">
			<cfset Application.sessions = Application.sessions + 1>
		</cflock>
		<cflog file="#This.Name#" type="Information" text="Session:
			#Session.sessionid# started">
	</cffunction>


	<cffunction name="onSessionEnd">
		<cfargument name = "SessionScope" required=true/>
		<cflog file="#This.Name#" type="Information" text="Session:
			#arguments.SessionScope.sessionid# ended">
	</cffunction>


	<cffunction name="onError">
		<cfargument name="Exception" required=true/>
		<cfargument type="String" name = "EventName" required=true/>
		<!--- Log all errors. --->
		<cflog file="#This.Name#" type="error" text="Event Name: #Eventname#">
		<cflog file="#This.Name#" type="error" text="Message: #exception.message#">
		<!--- Some exceptions, including server-side validation errors, do not
			generate a rootcause structure. --->
		<cfif isdefined("exception.rootcause")>
			<cflog file="#This.Name#" type="error"
				text="Root Cause Message: #exception.rootcause.message#">
		</cfif>
		<!--- Display an error message if there is a page context. --->
		<cfif NOT (Arguments.EventName IS onSessionEnd) OR
			(Arguments.EventName IS onApplicationEnd)>
			<cfoutput>
				<h2>
					An unexpected error occurred.
				</h2>
				<p>
					Please provide the following information to technical support:
				</p>
				<p>
					Error Event: #EventName#
				</p>
				<p>
					Error details:
					<br>
					<cfdump var=#exception#>
				</p>
			</cfoutput>
		</cfif>
	</cffunction>


</cfcomponent>
